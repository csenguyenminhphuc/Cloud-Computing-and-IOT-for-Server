# quick_threshold.py
"""
∆Ø·ªõc t√≠nh ng∆∞·ª°ng cosine cho h·ªá th·ªëng nh·∫≠n di·ªán admin.
- ƒê·∫ßu v√†o : server_admins.pt  (templates, labels)
- ƒê·∫ßu ra  : in ra ng∆∞·ª°ng cosine ƒë·ªÅ xu·∫•t  v√† c√°c th·ªëng k√™.
"""

import torch
import torch.nn.functional as F
import itertools
import numpy as np
import sys

# ------------------ CONFIG ------------------
PT_FILE  = "server_admins.pt"
PERCENT  = 5          # l·∫•y ph√¢n v·ªã th·∫•p nh·∫•t PERCENT % (lo·∫°i outlier qu√° nh·ªè)
MARGIN   = 0.03       # tr·ª´ th√™m "kho·∫£ng ƒë·ªám" an to√†n
# -------------------------------------------

try:
    templates, labels = torch.load(PT_FILE)
except FileNotFoundError:
    sys.exit(f"‚ÄºÔ∏è  Kh√¥ng t√¨m th·∫•y {PT_FILE}. H√£y ch·∫°y build_db.py tr∆∞·ªõc.")

N = len(labels)
if N < 2:
    sys.exit("‚ÄºÔ∏è  Database ch·ªâ c√≥ 1 admin ‚Äì kh√¥ng th·ªÉ t·ª± t√≠nh ng∆∞·ª°ng.")

templates = torch.stack(templates)          # [N, 512]

# --- kho·∫£ng c√°ch cosine cho m·ªçi c·∫∑p kh√°c ng∆∞·ªùi ---
dists = [
    1 - F.cosine_similarity(templates[i], templates[j], dim=0).item()
    for i, j in itertools.combinations(range(N), 2)
]

dists_np = np.array(dists)
p_val    = np.percentile(dists_np, PERCENT)   # ph√¢n v·ªã 5 % m·∫∑c ƒë·ªãnh
threshold = max(p_val - MARGIN, 0.0)          # kh√¥ng √¢m

# --- hi·ªÉn th·ªã k·∫øt qu·∫£ ---
print(f"S·ªë admin (template): {N}")
print(f"S·ªë c·∫∑p kh√°c ng∆∞·ªùi  : {len(dists)}")
print(f"Kho·∫£ng c√°ch cosine (min / mean / max): "
      f"{dists_np.min():.3f} / {dists_np.mean():.3f} / {dists_np.max():.3f}")
print(f"Ph√¢n v·ªã {PERCENT}%            : {p_val:.3f}")
print(f"Kho·∫£ng ƒë·ªám (-{MARGIN})        : -{MARGIN}")
print(f"üê±‚Äçüë§  Ng∆∞·ª°ng COSINE ƒë·ªÅ xu·∫•t     : {threshold:.3f}")

# G·ª£i √Ω ti·∫øp theo cho ng∆∞·ªùi d√πng
print("\n‚Üí Sao ch√©p gi√° tr·ªã 'ng∆∞·ª°ng cosine ƒë·ªÅ xu·∫•t' v√†o bi·∫øn THRESHOLD trong watchdog_cpu.py")
